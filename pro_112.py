# -*- coding: utf-8 -*-
"""Pro 112

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1a62h-heU79XwIyMYp5FrMm699TZ_XjXh
"""

from google.colab import files
data_to_load = files.upload()

import csv
import pandas as pd
import statistics
import plotly.express as px

df = pd.read_csv("data.csv")
fig = px.scatter(df , y = "quant_saved" , color = "highschool_completed")
fig.show()

with open("data.csv" , newline = "") as f :
  reader = csv.reader(f)
  savings = list(reader)

savings.pop(0)
total = len(savings)
total_remainder = 0

for data in savings :
  if int(data[3]) == 1 :
    total_remainder = total_remainder + 1

total_notRemainded = total - total_remainder

import plotly.graph_objects as go

fig = go.Figure(go.Bar(x = ["remainded" , "not remainded"] , y = [total_remainder , total_notRemainded]))
fig.show()

all_savings = []

for data in savings :
  all_savings.append(float(data[0]))

mean = statistics.mean(all_savings)
median = statistics.median(all_savings)
mode = statistics.mode(all_savings)

print(mean , mode , median)

remainder_savings = []
non_remainder_saving = []

for data in savings :
  if int(data[3]) == 1 :
    remainder_savings.append(float(data[0]))
  else :
    non_remainder_saving.append(float(data[0]))

mean_1 = statistics.mean(remainder_savings)
median_2 = statistics.median(remainder_savings)
mode_3 = statistics.mode(remainder_savings)

mean = statistics.mean(non_remainder_saving)
median = statistics.median(non_remainder_saving)
mode = statistics.mode(non_remainder_saving)

print(mean_1 , median_2 , mode_3 , mean , median , mode)

std_all = statistics.stdev(all_savings)
std_r = statistics.stdev(remainder_savings)
std_nr = statistics.stdev(non_remainder_saving)

print(std_all , std_r , std_nr)

import numpy as np

age = []
saving = []

for data in savings :
  if float(data[2]) != 0 :
    age.append(float(data[2]))
    saving.append(float(data[0]))

correlation = np.corrcoef(age , saving)
print(correlation[0 , 1])

import plotly.figure_factory as ff
fig = ff.create_distplot([df["quant_saved"].tolist()], ["Savings"], show_hist=False) 
fig.show()